$otl-red: 1px solid red;
$otl-blue: 1px solid blue;
$otl-yellow: 1px dashed yellow;

$lnk-clr: #00a1de;
$txt-clr: #6b6b6b;

$ff-sub: Tahoma, Helvetica, sans-serif;
$ff: Calibri, $ff-sub;

@mixin spite() {
  display: block;
  background: url(../i/sprites.png) no-repeat;
}

@mixin centered() {
  @include padding(0 30px);
  max-width: 940px;
  margin: 0 auto;
}

@mixin rounded($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
          border-radius: $radius;
}

@mixin box-shadow($shadow...) {
  -webkit-box-shadow: $shadow;
     -moz-box-shadow: $shadow;
          box-shadow: $shadow;
}

@mixin shadow-inset($x, $y, $blur, $color) {
  -webkit-box-shadow: inset $x $y $blur $color;
     -moz-box-shadow: inset $x $y $blur $color;
          box-shadow: inset $x $y $blur $color;
}



@mixin transition($property) {
  -webkit-transition: $property .2s ease;
     -moz-transition: $property .2s ease;
       -o-transition: $property .2s ease;
          transition: $property .2s ease;
}

@mixin box-sizing {
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box;
}

@mixin linear-gradient($from, $to) {
  background-color: $to;
  background-image:-moz-linear-gradient($from, $to);
  background-image:-o-linear-gradient($from, $to);
  background-image:-webkit-gradient(linear, left top, left bottom, color-stop(0, $from), color-stop(1, $to));
  background-image: -webkit-linear-gradient($from, $to);
  background-image: -ms-linear-gradient($from, $to);
  background-image: linear-gradient($from, $to);
}

@mixin transform($transforms) {
  -webkit-transform: $transforms;
     -moz-transform: $transforms;
       -o-transform: $transforms;
          transform: $transforms;
}

@mixin rotate($deg) {
  @include transform(rotate(#{$deg}deg));
}

@mixin scale($scale) {
  @include transform(scale($scale));
}

@mixin translate($x, $y) {
  @include transform(translate($x, $y));
}

@mixin skew($x, $y) {
  @include transform(skew(#{$x}deg, #{$y}deg));
}

@mixin transform-origin($origin) {
  -webkit-transform-origin: $origin;
     -moz-transform-origin: $origin;
       -o-transform-origin: $origin;
          transform-origin: $origin;
}

@mixin transition($transition-property, $transition-time, $method) {
    -webkit-transition: $transition-property $transition-time $method;
    -moz-transition: $transition-property $transition-time $method;
    -ms-transition: $transition-property $transition-time $method;
    -o-transition: $transition-property $transition-time $method;
    transition: $transition-property $transition-time $method;
}

@function rem($pixel_value) {

  @if type-of( $pixel-value ) == 'string' {
    @return $pixel_value;
  }

  @if unitless($pixel_value) {
    @return $pixel_value;
  }

  @if unit( $pixel_value ) == 'px' {
    @return ($pixel_value/16px)+rem;
  }
}

@mixin font($font-size, $family) {
  font: $font-size $family;
  font: rem($font-size) $family;
}

@mixin font-size($font-size) {
  font-size: $font-size;
  font-size: rem($font-size);
}


/* MARGINS */

@mixin margin($values) {
  @if type-of($values) == 'number' {
    margin: $values;
    margin: rem($values);
  } @else {
    $rem_values: ();
    @each $value in $values {
      @if $value == 0 {
        $rem_values: append($rem_values, $value);
      } @else {
        $rem_values: append($rem_values, rem($value));
      }

    }
    margin: $values;
    margin: $rem_values;
  }
}

@mixin margin-top($margin-top) {
  margin-top: $margin-top;
  margin-top: rem($margin-top);
}

@mixin margin-right($margin-right) {
  margin-right: $margin-right;
  margin-right: rem($margin-right);
}

@mixin margin-bottom($margin-bottom) {
  margin-bottom: $margin-bottom;
  margin-bottom: rem($margin-bottom);
}

@mixin margin-left($margin-left) {
  margin-left: $margin-left;
  margin-left: rem($margin-left);
}

/* PADDINGS */

@mixin padding($values) {
  @if type-of($values) == 'number' {
    padding: $values;
    padding: rem($values);
  } @else {
    $rem_values: ();
    @each $value in $values {
      @if $value == 0 {
        $rem_values: append($rem_values, $value);
      } @else {
        $rem_values: append($rem_values, rem($value));
      }
    }
    padding: $values;
    padding: $rem_values;
  }
}

@mixin padding-top($padding-top) {
  padding-top: $padding-top;
  padding-top: rem($padding-top);
}

@mixin padding-right($padding-right) {
  padding-right: $padding-right;
  padding-right: rem($padding-right);
}

@mixin padding-bottom($padding-bottom) {
  padding-bottom: $padding-bottom;
  padding-bottom: rem($padding-bottom);
}

@mixin padding-left($padding-left) {
  padding-left: $padding-left;
  padding-left: rem($padding-left);
}
